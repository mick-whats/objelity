// Generated by CoffeeScript 2.3.1
(function() {
  var getObject, objelity, test;

  objelity = require('../');

  ({test} = require('ava'));

  test('deepKeys', function(t) {
    var _keys, obj;
    obj = {
      a: {
        b: {
          c: [1, 2, 3]
        },
        d: new Date()
      },
      e: {
        f: {
          g: 'h'
        }
      }
    };
    _keys = objelity.deepKeys(obj);
    t.deepEqual(_keys, ['a.b.c.0', 'a.b.c.1', 'a.b.c.2', 'a.d', 'e.f.g']);
    obj = [
      {
        name: 'alice',
        age: 17
      },
      {
        name: 'bob',
        age: 32
      },
      {
        name: 'charlie',
        age: 25
      }
    ];
    _keys = objelity.deepKeys(obj);
    return t.deepEqual(_keys, ['0.name', '0.age', '1.name', '1.age', '2.name', '2.age']);
  });

  test('commonPath(pathStrings)', function(t) {
    var paths;
    paths = ['a.b.c.d.e.f', 'a.b.c.x.z', 'a.b.c', 'a.b.c.d.s'];
    return t.deepEqual(objelity.commonPath(paths), ['a', 'b', 'c']);
  });

  test('commonPath(pathArray)', function(t) {
    var paths;
    paths = [['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'x', 'z', 'q'], ['a', 'b', 'c', 'g', 'r'], ['a', 'b', 'c', 's'], ['a', 'b', 'c']];
    return t.deepEqual(objelity.commonPath(paths), ['a', 'b', 'c']);
  });

  test('compactObject(obj)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(objelity.compactObject(obj), {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    });
  });

  test('flattenObject(obj)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(objelity.flattenObject(obj), {
      aaa_bbb_ccc: 1,
      aaa_bbb_ddd: 0,
      aaa_eee_fff: void 0,
      aaa_eee_ggg: null,
      aaa_hhh_iii_jjj: true
    });
  });

  test('flattenObject(obj, separator)', function(t) {
    var obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        },
        hhh: {
          iii: {
            jjj: true
          }
        }
      }
    };
    return t.deepEqual(objelity.flattenObject(obj, '-'), {
      'aaa-bbb-ccc': 1,
      'aaa-bbb-ddd': 0,
      'aaa-eee-fff': void 0,
      'aaa-eee-ggg': null,
      'aaa-hhh-iii-jjj': true
    });
  });

  test('eachObject(obj, fn)', function(t) {
    var obj;
    t.plan(4);
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    return objelity.eachObject(obj, function(val, path, index, object) {
      if (path.includes('aaa.bbb.ccc')) {
        t.is(val, 1);
      } else if (path.includes('aaa.bbb.ddd')) {
        t.is(val, 2);
      } else if (path.includes('aaa.eee.fff')) {
        t.is(val, 3);
      } else if (path.includes('aaa.eee.ggg')) {
        t.is(val, 4);
      }
    });
  });

  test('mapObject(obj, fn) with sum', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = objelity.mapObject(obj, function(val, path, index, object) {
      return val * 2;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ccc: 2,
          ddd: 4
        },
        eee: {
          fff: 6,
          ggg: 8
        }
      }
    });
  });

  test('mapObject(obj, fn) with returned array', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    };
    newObj = objelity.mapObject(obj, function(val, path, index, object) {
      var newPath;
      if (path.match(/aaa\.bbb/)) {
        newPath = path.replace('aaa.bbb', 'xxx');
        return [newPath, val];
      } else {
        return [path, val];
      }
    });
    return t.deepEqual(newObj, {
      xxx: {
        ccc: 1,
        ddd: 0
      },
      aaa: {
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    });
  });

  test('mapObject(obj, fn) with returned object', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 0
        },
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    };
    newObj = objelity.mapObject(obj, function(val, path, index, object) {
      var newPath;
      if (path.match(/aaa\.bbb/)) {
        newPath = path.replace('aaa.bbb', 'xxx');
        return {
          [newPath]: val
        };
      } else {
        return {
          [path]: val
        };
      }
    });
    return t.deepEqual(newObj, {
      xxx: {
        ccc: 1,
        ddd: 0
      },
      aaa: {
        eee: {
          fff: void 0,
          ggg: null
        }
      }
    });
  });

  test('toText(obj)', function(t) {
    var _t, obj;
    obj = {
      a: 1
    };
    _t = objelity.toText(obj);
    t.not(_t, '{"a": 1}');
    return t.regex(_t, /{\s{2,}"a": 1\n}/);
  });

  test('toText(arr)', function(t) {
    var _t, obj;
    obj = [1, 2, 3];
    _t = objelity.toText(obj);
    t.not(_t, '[1,2,3]');
    return t.regex(_t, /\[\n\s{2}1,\n\s{2}2,\n\s{2}3\s{1}\]/);
  });

  test('toText(fn)', function(t) {
    var _t, obj;
    obj = () => {
      return true;
    };
    _t = objelity.toText(obj);
    return t.regex(_t, /\(\(\)\s=>\s{\n\s{6}return true;\n\s{4}}\)\(\)/);
  });

  test('toText(str)', function(t) {
    var _t, obj;
    obj = 'str';
    _t = objelity.toText(obj);
    return t.is(_t, 'str');
  });

  test('toText(num)', function(t) {
    var _t, obj;
    obj = 123;
    _t = objelity.toText(obj);
    return t.is(_t, '123');
  });

  test('toText(undefined)', function(t) {
    var _t, obj;
    obj = void 0;
    _t = objelity.toText(obj);
    return t.is(_t, 'undefined');
  });

  test('toText(null)', function(t) {
    var _t, obj;
    obj = null;
    _t = objelity.toText(obj);
    return t.is(_t, 'null');
  });

  test('toText(true)', function(t) {
    var _t, obj;
    obj = true;
    _t = objelity.toText(obj);
    return t.is(_t, 'true');
  });

  test('toText(NaN)', function(t) {
    var _t, obj;
    obj = 0/0;
    _t = objelity.toText(obj);
    return t.is(_t, 'NaN');
  });

  test('rejectObject(obj, fn)', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = objelity.rejectObject(obj, function(val, path, index, object) {
      return val % 2 === 0;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ccc: 1
        },
        eee: {
          fff: 3
        }
      }
    });
  });

  test('rejectObject(obj, array)', function(t) {
    var obj;
    obj = {
      a: 1,
      b: 2,
      c: 3
    };
    return t.deepEqual(objelity.rejectObject(obj, ['b']), {
      a: 1,
      c: 3
    });
  });

  test('rejectObject(obj, nestedArray)', function(t) {
    var obj;
    obj = {
      a: {
        aa: 11,
        bb: 22
      },
      b: 2,
      c: 3
    };
    t.deepEqual(objelity.rejectObject(obj, ['a']), {
      b: 2,
      c: 3
    });
    return t.deepEqual(objelity.rejectObject(obj, ['a.b', 'c']), {
      a: {
        aa: 11
      },
      b: 2
    });
  });

  test('filterObject(obj, fn)', function(t) {
    var newObj, obj;
    obj = {
      aaa: {
        bbb: {
          ccc: 1,
          ddd: 2
        },
        eee: {
          fff: 3,
          ggg: 4
        }
      }
    };
    newObj = objelity.filterObject(obj, function(val, path, index, object) {
      return val % 2 === 0;
    });
    return t.deepEqual(newObj, {
      aaa: {
        bbb: {
          ddd: 2
        },
        eee: {
          ggg: 4
        }
      }
    });
  });

  test('filterObject(obj, array)', function(t) {
    var obj;
    obj = {
      a: 1,
      b: 2,
      c: 3
    };
    return t.deepEqual(objelity.filterObject(obj, ['a', 'c']), {
      a: 1,
      c: 3
    });
  });

  test('filterObject(obj, nestedArray)', function(t) {
    var obj;
    obj = {
      a: {
        aa: 11,
        bb: 22
      },
      b: 2,
      c: 3
    };
    t.deepEqual(objelity.filterObject(obj, ['a', 'c']), {
      a: {
        aa: 11,
        bb: 22
      },
      c: 3
    });
    return t.deepEqual(objelity.filterObject(obj, ['a.b', 'c']), {
      a: {
        bb: 22
      },
      c: 3
    });
  });

  test('to string of deep keys', function(t) {
    var newObj, obj;
    obj = {
      str: 'string1',
      num: 123,
      arr: [true, false, void 0],
      o: {
        sym: Symbol("foo"),
        nil: null,
        fn: (function() {
          return false;
        })
      }
    };
    newObj = objelity.toStringOfDeepKeys(obj);
    return t.deepEqual(newObj, {
      str: 'string1',
      num: 123,
      arr: [true, false, '[object Undefined]'],
      o: {
        sym: 'Symbol(foo)',
        nil: '[object Null]',
        fn: "function () {\n          return false;\n        }"
      }
    });
  });

  getObject = function() {
    return {
      num: 123,
      str: 'string',
      bool1: true,
      bool2: false,
      nul: null,
      und: void 0,
      arr: ['a', 'r', 'r'],
      buf: new Buffer(''),
      fn: function() {
        return true;
      },
      gfn: function*() {
        return (yield 0);
      },
      args: arguments,
      obcr: Object.create(null),
      date: new Date(Date.UTC(2018, 9, 15)),
      reg: /foo/,
      newreg: new RegExp('foo'),
      err: new Error('unknown error'),
      symbol: Symbol('str'),
      map: new Map([['a', 1], ['b', 2]]),
      weakMap: new WeakMap(),
      set: new Set([1, 2, '3']),
      weakSet: new WeakSet(),
      int8Array: new Int8Array([1, 9876543210, -9876543210]),
      uint8Array: new Uint8Array([1, 9876543210, -9876543210]),
      uint8ClampedArray: new Uint8ClampedArray([1, 9876543210, -9876543210]),
      int16Array: new Int16Array([1, 9876543210, -9876543210]),
      uint16Array: new Uint16Array([1, 9876543210, -9876543210]),
      int32Array: new Int32Array([1, 9876543210, -9876543210]),
      uint32Array: new Uint32Array([1, 9876543210, -9876543210]),
      float32Array: new Float32Array([1, 9876543210, -9876543210]),
      float64Array: new Float64Array([1, 9876543210, -9876543210]),
      nan: 0 / 0
    };
  };

  test('stringify diff', function(t) {
    var a, aa, c, cc;
    a = objelity.stringify(getObject(999), null, 2);
    aa = JSON.parse(a);
    c = JSON.stringify(getObject(999), null, 2);
    cc = JSON.parse(c);
    t.notDeepEqual(aa, cc);
    t.snapshot(a);
    return t.snapshot(c);
  });

  test('stringify primitive', function(t) {
    t.is(objelity.stringify('str'), '"str"');
    t.is(objelity.stringify(123), '123');
    t.is(objelity.stringify(true), 'true');
    t.is(objelity.stringify(false), 'false');
    t.is(objelity.stringify(null), 'null');
    t.is(objelity.stringify(void 0), '"[object Undefined] undefined"');
    t.is(objelity.stringify(0/0), '"[object Number] NaN"');
    return t.is(objelity.stringify([1, 2, 3]), '[1,2,3]');
  });

  test('stringify readme', function(t) {
    var a, aa, c, cc, obj;
    obj = {
      undefined: void 0,
      function: function() {
        return true;
      },
      generator: function*() {
        return (yield 0);
      },
      RegExp: /foo/,
      newReg: new RegExp('foo'),
      err: new Error('unknown error'),
      // symbol: Symbol('str')
      // map: new Map([['a',1],['b',2]])
      // weakMap: new WeakMap()
      // set: new Set([1,2,'3'])
      // weakSet: new WeakSet()
      NaN: 0 / 0
    };
    a = objelity.stringify(obj, null, 2);
    aa = JSON.parse(a);
    c = JSON.stringify(obj, null, 2);
    cc = JSON.parse(c);
    t.snapshot(aa);
    return t.snapshot(cc);
  });

}).call(this);
