// Generated by CoffeeScript 2.3.1
(function() {
  var _, objelity;

  _ = require('lodash');

  objelity = {
    deepKeys: function(obj) {
      var _depth, _halfway, _keys, first, next;
      // result = []
      first = true;
      _depth = [];
      next = true;
      while (next) {
        if (first) {
          _depth.push(Object.keys(obj));
          first = false;
        }
        _keys = _.last(_depth);
        _halfway = [];
        next = false;
        _keys.forEach(function(key) {
          var _arr, _halfObj;
          _halfObj = _.get(obj, key);
          if (_.isPlainObject(_halfObj) || _.isArray(_halfObj)) {
            next = true;
            _arr = Object.keys(_halfObj).map(function(childKey) {
              return `${key}.${childKey}`;
            });
            return _halfway.push(_arr);
          } else {
            return _halfway.push(key);
          }
        });
        _depth.push(_.flatten(_halfway));
      }
      return _.last(_depth);
    },
    commonPath: function(paths) {
      var pathArray, result;
      pathArray = paths.map(function(path) {
        if (_.isString(path)) {
          return _.toPath(path);
        }
        return path;
      });
      result = [];
      pathArray[0].some(function(s, columnIndex) {
        var rows;
        rows = pathArray.map(function(row) {
          return row[columnIndex];
        });
        if (rows.every(function(row) {
          return row === s;
        })) {
          result.push(s);
          return false;
        } else {
          return true;
        }
      });
      return result;
    },
    compactObject: function(obj) {
      var _paths, newObj;
      _paths = objelity.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p) {
        var val;
        val = _.get(obj, p);
        if (_.isNil(val)) {

        } else {
          _.set(newObj, p, val);
        }
      });
      return newObj;
    },
    flattenObject: function(obj, separator = '_') {
      var _paths, newObj;
      _paths = objelity.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p) {
        var _newPath, val;
        val = _.get(obj, p);
        _newPath = p.replace(/\./g, separator);
        return _.set(newObj, _newPath, val);
      });
      return newObj;
    },
    eachObject: function(obj, fn) {
      var _paths;
      _paths = objelity.deepKeys(obj);
      _paths.forEach(function(p, i) {
        var val;
        val = _.get(obj, p);
        fn(val, p, i, obj);
      });
    },
    mapObject: function(obj, fn) {
      var _paths, newObj;
      _paths = objelity.deepKeys(obj);
      newObj = {};
      _paths.forEach(function(p, i) {
        var key, resArr, val;
        val = _.get(obj, p);
        resArr = fn(val, p, i, obj);
        if (_.isArray(resArr)) {
          if (resArr.length > 1) {
            return _.set(newObj, resArr[0], resArr[1]);
          } else {
            return _.set(newObj, p, resArr);
          }
        } else if (_.isPlainObject(resArr)) {
          key = Object.keys(resArr)[0];
          val = resArr[key];
          return _.set(newObj, key, val);
        } else {
          return _.set(newObj, p, resArr);
        }
      });
      return newObj;
    },
    toText: function(obj) {
      switch (typeof obj) {
        case 'object':
          return JSON.stringify(obj, null, 2);
        case 'undefined':
          return 'undefined';
        case 'function':
          return `(${obj.toString()})()`;
        default:
          return obj.toString();
      }
    },
    rejectObject: function(obj, fn) {
      var newObj;
      newObj = objelity.mapObject(obj, function(val, p, i, obj) {
        var flag;
        if (_.isFunction(fn)) {
          if (fn(val, p, i, obj)) {
            return null;
          } else {
            return val;
          }
        } else if (_.isArray(fn)) {
          flag = fn.some(function(_path) {
            if (_.startsWith(p, _path)) {
              return true;
            } else {
              return false;
            }
          });
          if (flag) {
            return null;
          } else {
            return val;
          }
        } else {
          return null;
        }
      });
      return objelity.compactObject(newObj);
    },
    filterObject: function(obj, fn) {
      var newObj;
      newObj = objelity.mapObject(obj, function(val, p, i, obj) {
        var flag;
        if (_.isFunction(fn)) {
          if (fn(val, p, i, obj)) {
            return val;
          } else {
            return null;
          }
        } else if (_.isArray(fn)) {
          flag = fn.some(function(_path) {
            if (_.startsWith(p, _path)) {
              return true;
            } else {
              return false;
            }
          });
          if (flag) {
            return val;
          } else {
            return null;
          }
        } else {
          return null;
        }
      });
      return objelity.compactObject(newObj);
    },
    toStringOfDeepKeys: function(obj) {
      return objelity.mapObject(obj, function(val, p, i, obj) {
        switch (typeof val) {
          case 'undefined':
            return 'undefined';
          case 'function':
            return val.toString();
          default:
            if (_.isNull(val)) {
              return 'null';
            } else {
              return val.toString();
            }
        }
      });
    }
  };

  module.exports = objelity;

}).call(this);
